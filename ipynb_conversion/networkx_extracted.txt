[markdown]
# NetworkX

>[NetworkX](https://networkx.org/) is a Python package for the creation, manipulation, and study of the structure, dynamics, and functions of complex networks.

This notebook goes over how to do question answering over a graph data structure.

[markdown]
## Setting up

We have to install a Python package.

[code]
%pip install --upgrade --quiet  networkx

[markdown]
## Create the graph

In this section, we construct an example graph. At the moment, this works best for small pieces of text.

[code]
from langchain_community.graphs.index_creator import GraphIndexCreator
from langchain_openai import OpenAI

[code]
index_creator = GraphIndexCreator(llm=OpenAI(temperature=0))

[code]
with open("../../../how_to/state_of_the_union.txt") as f:
    all_text = f.read()

[markdown]
We will use just a small snippet, because extracting the knowledge triplets is a bit intensive at the moment.

[code]
text = "\n".join(all_text.split("\n\n")[105:108])

[code]
text

[output]
'It won’t look like much, but if you stop and look closely, you’ll see a “Field of dreams,” the ground on which America’s future will be built. \nThis is where Intel, the American company that helped build Silicon Valley, is going to build its $20 billion semiconductor “mega site”. \nUp to eight state-of-the-art factories in one place. 10,000 new good-paying jobs. '

[code]
graph = index_creator.from_text(text)

[markdown]
We can inspect the created graph.

[code]
graph.get_triples()

[output]
[('Intel', '$20 billion semiconductor "mega site"', 'is going to build'),
 ('Intel', 'state-of-the-art factories', 'is building'),
 ('Intel', '10,000 new good-paying jobs', 'is creating'),
 ('Intel', 'Silicon Valley', 'is helping build'),
 ('Field of dreams',
  "America's future will be built",
  'is the ground on which')]

[markdown]
## Querying the graph
We can now use the graph QA chain to ask question of the graph

[code]
from langchain.chains import GraphQAChain

[code]
chain = GraphQAChain.from_llm(OpenAI(temperature=0), graph=graph, verbose=True)

[code]
chain.run("what is Intel going to build?")

[output]


[1m> Entering new GraphQAChain chain...[0m
Entities Extracted:
[32;1m[1;3m Intel[0m
Full Context:
[32;1m[1;3mIntel is going to build $20 billion semiconductor "mega site"
Intel is building state-of-the-art factories
Intel is creating 10,000 new good-paying jobs
Intel is helping build Silicon Valley[0m

[1m> Finished chain.[0m

' Intel is going to build a $20 billion semiconductor "mega site" with state-of-the-art factories, creating 10,000 new good-paying jobs and helping to build Silicon Valley.'

[markdown]
## Save the graph
We can also save and load the graph.

[code]
graph.write_to_gml("graph.gml")

[code]
from langchain_community.graphs import NetworkxEntityGraph

[code]
loaded_graph = NetworkxEntityGraph.from_gml("graph.gml")

[code]
loaded_graph.get_triples()

[output]
[('Intel', '$20 billion semiconductor "mega site"', 'is going to build'),
 ('Intel', 'state-of-the-art factories', 'is building'),
 ('Intel', '10,000 new good-paying jobs', 'is creating'),
 ('Intel', 'Silicon Valley', 'is helping build'),
 ('Field of dreams',
  "America's future will be built",
  'is the ground on which')]

[code]
loaded_graph.get_number_of_nodes()

[code]
loaded_graph.add_node("NewNode")

[code]
loaded_graph.has_node("NewNode")

[code]
loaded_graph.remove_node("NewNode")

[code]
loaded_graph.get_neighbors("Intel")

[code]
loaded_graph.has_edge("Intel", "Silicon Valley")

[code]
loaded_graph.remove_edge("Intel", "Silicon Valley")

[code]
loaded_graph.clear_edges()

[code]
loaded_graph.clear()

