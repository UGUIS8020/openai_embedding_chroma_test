[markdown]
# __ModuleName__

- TODO: Make sure API reference link is correct.

This notebook provides a quick overview for getting started with __ModuleName__ [tool](/docs/integrations/tools/). For detailed documentation of all __ModuleName__ features and configurations head to the [API reference](https://python.langchain.com/v0.2/api_reference/community/tools/langchain_community.tools.__module_name__.tool.__ModuleName__.html).

- TODO: Add any other relevant links, like information about underlying API, etc.

## Overview

### Integration details

- TODO: Make sure links and features are correct

| Class | Package | Serializable | [JS support](https://js.langchain.com/docs/integrations/tools/__module_name__) |  Package latest |
| :--- | :--- | :---: | :---: | :---: |
| [__ModuleName__](https://python.langchain.com/v0.2/api_reference/community/tools/langchain_community.tools.__module_name__.tool.__ModuleName__.html) | [langchain-community](https://api.python.langchain.com/en/latest/community_api_reference.html) | beta/❌ | ✅/❌ |  ![PyPI - Version](https://img.shields.io/pypi/v/langchain-community?style=flat-square&label=%20) |

### Tool features

- TODO: Add feature table if it makes sense


## Setup

- TODO: Add any additional deps

The integration lives in the `langchain-community` package.

[code]
%pip install --quiet -U langchain-community

[markdown]
### Credentials

- TODO: Add any credentials that are needed

[code]
import getpass
import os

# if not os.environ.get("__MODULE_NAME___API_KEY"):
#     os.environ["__MODULE_NAME___API_KEY"] = getpass.getpass("__MODULE_NAME__ API key:\n")

[markdown]
It's also helpful (but not needed) to set up [LangSmith](https://smith.langchain.com/) for best-in-class observability:

[code]
# os.environ["LANGCHAIN_TRACING_V2"] = "true"
# os.environ["LANGCHAIN_API_KEY"] = getpass.getpass()

[markdown]
## Instantiation

- TODO: Fill in instantiation params

Here we show how to instantiate an instance of the __ModuleName__ tool, with 

[code]
from langchain_community.tools import __ModuleName__


tool = __ModuleName__(
    ...
)

[markdown]
## Invocation

### [Invoke directly with args](/docs/concepts/#invoke-with-just-the-arguments)

- TODO: Describe what the tool args are, fill them in, run cell

[code]
tool.invoke({...})

[markdown]
### [Invoke with ToolCall](/docs/concepts/#invoke-with-toolcall)

We can also invoke the tool with a model-generated ToolCall, in which case a ToolMessage will be returned:

- TODO: Fill in tool args and run cell

[code]
# This is usually generated by a model, but we'll create a tool call directly for demo purposes.
model_generated_tool_call = {
    "args": {...},  # TODO: FILL IN
    "id": "1",
    "name": tool.name,
    "type": "tool_call",
}
tool.invoke(model_generated_tool_call)

[markdown]
## Chaining

- TODO: Add user question and run cells

We can use our tool in a chain by first binding it to a [tool-calling model](/docs/how_to/tool_calling/) and then calling it:

import ChatModelTabs from "@theme/ChatModelTabs";

<ChatModelTabs customVarName="llm" />


[code]
# | output: false
# | echo: false

# !pip install -qU langchain langchain-openai
from langchain.chat_models import init_chat_model

llm = init_chat_model(model="gpt-4o", model_provider="openai")

[code]
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnableConfig, chain

prompt = ChatPromptTemplate(
    [
        ("system", "You are a helpful assistant."),
        ("human", "{user_input}"),
        ("placeholder", "{messages}"),
    ]
)

# specifying tool_choice will force the model to call this tool.
llm_with_tools = llm.bind_tools([tool], tool_choice=tool.name)

llm_chain = prompt | llm_with_tools


@chain
def tool_chain(user_input: str, config: RunnableConfig):
    input_ = {"user_input": user_input}
    ai_msg = llm_chain.invoke(input_, config=config)
    tool_msgs = tool.batch(ai_msg.tool_calls, config=config)
    return llm_chain.invoke({**input_, "messages": [ai_msg, *tool_msgs]}, config=config)


tool_chain.invoke("...")

[markdown]
## API reference

For detailed documentation of all __ModuleName__ features and configurations head to the API reference: https://python.langchain.com/v0.2/api_reference/community/tools/langchain_community.tools.__module_name__.tool.__ModuleName__.html

