[markdown]
---
sidebar_label: __ModuleName__
---

[markdown]
# __ModuleName__Loader

- TODO: Make sure API reference link is correct.

This notebook provides a quick overview for getting started with __ModuleName__ [document loader](https://python.langchain.com/docs/concepts/#document-loaders). For detailed documentation of all __ModuleName__Loader features and configurations head to the [API reference](https://python.langchain.com/v0.2/api_reference/community/document_loaders/langchain_community.document_loaders.__module_name___loader.__ModuleName__Loader.html).

- TODO: Add any other relevant links, like information about underlying API, etc.

## Overview
### Integration details

- TODO: Fill in table features.
- TODO: Remove JS support link if not relevant, otherwise ensure link is correct.
- TODO: Make sure API reference links are correct.

| Class | Package | Local | Serializable | [JS support](https://js.langchain.com/docs/integrations/document_loaders/web_loaders/__module_name___loader)|
| :--- | :--- | :---: | :---: |  :---: |
| [__ModuleName__Loader](https://python.langchain.com/v0.2/api_reference/community/document_loaders/langchain_community.document_loaders.__module_name__loader.__ModuleName__Loader.html) | [langchain_community](https://api.python.langchain.com/en/latest/community_api_reference.html) | ✅/❌ | beta/❌ | ✅/❌ | 
### Loader features
| Source | Document Lazy Loading | Native Async Support
| :---: | :---: | :---: | 
| __ModuleName__Loader | ✅/❌ | ✅/❌ | 

## Setup

- TODO: Update with relevant info.

To access __ModuleName__ document loader you'll need to install the `__package_name__` integration package, and create a **ModuleName** account and get an API key.

### Credentials

- TODO: Update with relevant info.

Head to (TODO: link) to sign up to __ModuleName__ and generate an API key. Once you've done this set the __MODULE_NAME___API_KEY environment variable:

[code]
import getpass
import os

os.environ["__MODULE_NAME___API_KEY"] = getpass.getpass("Enter your __ModuleName__ API key: ")

[markdown]
If you want to get automated best in-class tracing of your model calls you can also set your [LangSmith](https://docs.smith.langchain.com/) API key by uncommenting below:

[code]
# os.environ["LANGSMITH_API_KEY"] = getpass.getpass("Enter your LangSmith API key: ")
# os.environ["LANGSMITH_TRACING"] = "true"

[markdown]
### Installation

Install **langchain_community**.

- TODO: Add any other required packages

[code]
%pip install -qU langchain_community

[markdown]
## Initialization

Now we can instantiate our model object and load documents:

- TODO: Update model instantiation with relevant params.

[code]
from langchain_community.document_loaders import __ModuleName__Loader

loader = __ModuleName__Loader(
    # required params = ...
    # optional params = ...
)

[markdown]
## Load

- TODO: Run cells to show loading capabilities

[code]
docs = loader.load()
docs[0]

[code]
print(docs[0].metadata)

[markdown]
## Lazy Load

- TODO: Run cells to show lazy loading capabilities. Delete if lazy loading is not implemented.

[code]
page = []
for doc in loader.lazy_load():
    page.append(doc)
    if len(page) >= 10:
        # do some paged operation, e.g.
        # index.upsert(page)

        page = []

[markdown]
## TODO: Any functionality specific to this document loader

E.g. using specific configs for different loading behavior. Delete if not relevant.

[markdown]
## API reference

For detailed documentation of all __ModuleName__Loader features and configurations head to the API reference: https://python.langchain.com/v0.2/api_reference/community/document_loaders/langchain_community.document_loaders.__module_name___loader.__ModuleName__Loader.html

