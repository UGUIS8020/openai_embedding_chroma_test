[markdown]
# Program-aided language model (PAL) chain

Implements Program-Aided Language Models, as in https://arxiv.org/pdf/2211.10435.pdf.


[code]
from langchain_experimental.pal_chain import PALChain
from langchain_openai import OpenAI

[code]
llm = OpenAI(temperature=0, max_tokens=512)

[markdown]
## Math Prompt

[code]
pal_chain = PALChain.from_math_prompt(llm, verbose=True)

[code]
question = "Jan has three times the number of pets as Marcia. Marcia has two more pets than Cindy. If Cindy has four pets, how many total pets do the three have?"

[code]
pal_chain.run(question)

[output]


[1m> Entering new PALChain chain...[0m
[32;1m[1;3mdef solution():
    """Jan has three times the number of pets as Marcia. Marcia has two more pets than Cindy. If Cindy has four pets, how many total pets do the three have?"""
    cindy_pets = 4
    marcia_pets = cindy_pets + 2
    jan_pets = marcia_pets * 3
    total_pets = cindy_pets + marcia_pets + jan_pets
    result = total_pets
    return result[0m

[1m> Finished chain.[0m

'28'

[markdown]
## Colored Objects

[code]
pal_chain = PALChain.from_colored_object_prompt(llm, verbose=True)

[code]
question = "On the desk, you see two blue booklets, two purple booklets, and two yellow pairs of sunglasses. If I remove all the pairs of sunglasses from the desk, how many purple items remain on it?"

[code]
pal_chain.run(question)

[output]


[1m> Entering new PALChain chain...[0m
[32;1m[1;3m# Put objects into a list to record ordering
objects = []
objects += [('booklet', 'blue')] * 2
objects += [('booklet', 'purple')] * 2
objects += [('sunglasses', 'yellow')] * 2

# Remove all pairs of sunglasses
objects = [object for object in objects if object[0] != 'sunglasses']

# Count number of purple objects
num_purple = len([object for object in objects if object[1] == 'purple'])
answer = num_purple[0m

[1m> Finished PALChain chain.[0m

'2'

[markdown]
## Intermediate Steps
You can also use the intermediate steps flag to return the code executed that generates the answer.

[code]
pal_chain = PALChain.from_colored_object_prompt(
    llm, verbose=True, return_intermediate_steps=True
)

[code]
question = "On the desk, you see two blue booklets, two purple booklets, and two yellow pairs of sunglasses. If I remove all the pairs of sunglasses from the desk, how many purple items remain on it?"

[code]
result = pal_chain({"question": question})

[output]


[1m> Entering new PALChain chain...[0m
[32;1m[1;3m# Put objects into a list to record ordering
objects = []
objects += [('booklet', 'blue')] * 2
objects += [('booklet', 'purple')] * 2
objects += [('sunglasses', 'yellow')] * 2

# Remove all pairs of sunglasses
objects = [object for object in objects if object[0] != 'sunglasses']

# Count number of purple objects
num_purple = len([object for object in objects if object[1] == 'purple'])
answer = num_purple[0m

[1m> Finished chain.[0m


[code]
result["intermediate_steps"]

[output]
"# Put objects into a list to record ordering\nobjects = []\nobjects += [('booklet', 'blue')] * 2\nobjects += [('booklet', 'purple')] * 2\nobjects += [('sunglasses', 'yellow')] * 2\n\n# Remove all pairs of sunglasses\nobjects = [object for object in objects if object[0] != 'sunglasses']\n\n# Count number of purple objects\nnum_purple = len([object for object in objects if object[1] == 'purple'])\nanswer = num_purple"

[code]


